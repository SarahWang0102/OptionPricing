from WindPy import *
import QuantLib as ql
import pandas as pd
import math
import numpy as np

def get_wind_data(evalDate):
    # 50ETF currently trading contracts
    datestr = str(evalDate.year()) + "-" + str(evalDate.month()) + "-" + str(evalDate.dayOfMonth())
    #################################
    '''
    options     = w.wset("optioncontractbasicinfo","exchange=sse;windcode=510050.SH;status=all;field=wind_code,call_or_put,exercise_price,exercise_date")
    optionFlds  = options.Fields
    optionData  = options.Data
    print('OPTION DATA')
    print(optionData)
    #print('optionFlds',optionFlds)
    #print('optionData : ', optionData)
    '''
    ##################################
    try:
        optionFlds = ['wind_code', 'call_or_put', 'exercise_price', 'exercise_date']
        optionData= [['10000001', '10000002', '10000003', '10000004', '10000005', '10000006', '10000007', '10000008', '10000009', '10000010', '10000011', '10000012', '10000013', '10000014', '10000015', '10000016', '10000017', '10000018', '10000019', '10000020', '10000021', '10000022', '10000023', '10000024', '10000025', '10000026', '10000027', '10000028', '10000029', '10000030', '10000031', '10000032', '10000033', '10000034', '10000035', '10000036', '10000037', '10000038', '10000039', '10000040', '10000041', '10000042', '10000043', '10000044', '10000045', '10000046', '10000047', '10000048', '10000049', '10000050', '10000051', '10000052', '10000053', '10000054', '10000055', '10000056', '10000057', '10000058', '10000059', '10000060', '10000061', '10000062', '10000063', '10000064', '10000065', '10000066', '10000067', '10000068', '10000069', '10000070', '10000071', '10000072', '10000073', '10000074', '10000075', '10000076', '10000077', '10000078', '10000079', '10000080', '10000081', '10000082', '10000083', '10000084', '10000085', '10000086', '10000087', '10000088', '10000089', '10000090', '10000091', '10000092', '10000093', '10000094', '10000095', '10000096', '10000097', '10000098', '10000099', '10000100', '10000101', '10000102', '10000103', '10000104', '10000105', '10000106', '10000107', '10000108', '10000109', '10000110', '10000111', '10000112', '10000113', '10000114', '10000115', '10000116', '10000117', '10000118', '10000119', '10000120', '10000121', '10000122', '10000123', '10000124', '10000125', '10000126', '10000127', '10000128', '10000129', '10000130', '10000131', '10000132', '10000133', '10000134', '10000135', '10000136', '10000137', '10000138', '10000139', '10000140', '10000141', '10000142', '10000143', '10000144', '10000145', '10000146', '10000147', '10000148', '10000149', '10000150', '10000151', '10000152', '10000153', '10000154', '10000155', '10000156', '10000157', '10000158', '10000159', '10000160', '10000161', '10000162', '10000163', '10000164', '10000165', '10000166', '10000167', '10000168', '10000169', '10000170', '10000171', '10000172', '10000173', '10000174', '10000175', '10000176', '10000177', '10000178', '10000179', '10000180', '10000181', '10000182', '10000183', '10000184', '10000185', '10000186', '10000187', '10000188', '10000189', '10000190', '10000191', '10000192', '10000193', '10000194', '10000195', '10000196', '10000197', '10000198', '10000199', '10000200', '10000201', '10000202', '10000203', '10000204', '10000205', '10000206', '10000207', '10000208', '10000209', '10000210', '10000211', '10000212', '10000213', '10000214', '10000215', '10000216', '10000217', '10000218', '10000219', '10000220', '10000221', '10000222', '10000223', '10000224', '10000225', '10000226', '10000227', '10000228', '10000229', '10000230', '10000231', '10000232', '10000233', '10000234', '10000235', '10000236', '10000237', '10000238', '10000239', '10000240', '10000241', '10000242', '10000243', '10000244', '10000245', '10000246', '10000247', '10000248', '10000249', '10000250', '10000251', '10000252', '10000253', '10000254', '10000255', '10000256', '10000257', '10000258', '10000259', '10000260', '10000261', '10000262', '10000263', '10000264', '10000265', '10000266', '10000267', '10000268', '10000269', '10000270', '10000271', '10000272', '10000273', '10000274', '10000275', '10000276', '10000277', '10000278', '10000279', '10000280', '10000281', '10000282', '10000283', '10000284', '10000285', '10000286', '10000287', '10000288', '10000289', '10000290', '10000291', '10000292', '10000293', '10000294', '10000295', '10000296', '10000297', '10000298', '10000299', '10000300', '10000301', '10000302', '10000303', '10000304', '10000305', '10000306', '10000307', '10000308', '10000309', '10000310', '10000311', '10000312', '10000313', '10000314', '10000315', '10000316', '10000317', '10000318', '10000319', '10000320', '10000321', '10000322', '10000323', '10000324', '10000325', '10000326', '10000327', '10000328', '10000329', '10000330', '10000331', '10000332', '10000333', '10000334', '10000335', '10000336', '10000337', '10000338', '10000339', '10000340', '10000341', '10000342', '10000343', '10000344', '10000345', '10000346', '10000347', '10000348', '10000349', '10000350', '10000351', '10000352', '10000353', '10000354', '10000355', '10000356', '10000357', '10000358', '10000359', '10000360', '10000361', '10000362', '10000363', '10000364', '10000365', '10000366', '10000367', '10000368', '10000369', '10000370', '10000371', '10000372', '10000373', '10000374', '10000375', '10000376', '10000377', '10000378', '10000379', '10000380', '10000381', '10000382', '10000383', '10000384', '10000385', '10000386', '10000387', '10000388', '10000389', '10000390', '10000391', '10000392', '10000393', '10000394', '10000395', '10000396', '10000397', '10000398', '10000399', '10000400', '10000401', '10000402', '10000403', '10000404', '10000405', '10000406', '10000407', '10000408', '10000409', '10000410', '10000411', '10000412', '10000413', '10000414', '10000415', '10000416', '10000417', '10000418', '10000419', '10000420', '10000421', '10000422', '10000423', '10000424', '10000425', '10000426', '10000427', '10000428', '10000429', '10000430', '10000431', '10000432', '10000433', '10000434', '10000435', '10000436', '10000437', '10000438', '10000439', '10000440', '10000441', '10000442', '10000443', '10000444', '10000445', '10000446', '10000447', '10000448', '10000449', '10000450', '10000451', '10000452', '10000453', '10000454', '10000455', '10000456', '10000457', '10000458', '10000459', '10000460', '10000461', '10000462', '10000463', '10000464', '10000465', '10000466', '10000467', '10000468', '10000469', '10000470', '10000471', '10000472', '10000473', '10000474', '10000475', '10000476', '10000477', '10000478', '10000479', '10000480', '10000481', '10000482', '10000483', '10000484', '10000485', '10000486', '10000487', '10000488', '10000489', '10000490', '10000491', '10000492', '10000493', '10000494', '10000495', '10000496', '10000497', '10000498', '10000499', '10000500', '10000501', '10000502', '10000503', '10000504', '10000505', '10000506', '10000507', '10000508', '10000509', '10000510', '10000511', '10000512', '10000513', '10000514', '10000515', '10000516', '10000517', '10000518', '10000519', '10000520', '10000521', '10000522', '10000523', '10000524', '10000525', '10000526', '10000527', '10000528', '10000529', '10000530', '10000531', '10000532', '10000533', '10000534', '10000535', '10000536', '10000537', '10000538', '10000539', '10000540', '10000541', '10000542', '10000543', '10000544', '10000545', '10000546', '10000547', '10000548', '10000549', '10000550', '10000551', '10000552', '10000553', '10000554', '10000555', '10000556', '10000557', '10000558', '10000559', '10000560', '10000561', '10000562', '10000563', '10000564', '10000565', '10000566', '10000567', '10000568', '10000569', '10000570', '10000571', '10000572', '10000573', '10000574', '10000575', '10000576', '10000577', '10000578', '10000579', '10000580', '10000581', '10000582', '10000583', '10000584', '10000585', '10000586', '10000587', '10000588', '10000589', '10000590', '10000591', '10000592', '10000593', '10000594', '10000595', '10000596', '10000597', '10000598', '10000599', '10000600', '10000601', '10000602', '10000603', '10000604', '10000605', '10000606', '10000607', '10000608', '10000609', '10000610', '10000611', '10000612', '10000613', '10000614', '10000615', '10000616', '10000617', '10000618', '10000619', '10000620', '10000621', '10000622', '10000623', '10000624', '10000625', '10000626', '10000627', '10000628', '10000629', '10000630', '10000631', '10000632', '10000633', '10000634', '10000635', '10000636', '10000637', '10000638', '10000639', '10000640', '10000641', '10000642', '10000643', '10000644', '10000645', '10000646', '10000647', '10000648', '10000649', '10000650', '10000651', '10000652', '10000653', '10000654', '10000655', '10000656', '10000657', '10000658', '10000659', '10000660', '10000661', '10000662', '10000663', '10000664', '10000665', '10000666', '10000667', '10000668', '10000669', '10000670', '10000671', '10000672', '10000673', '10000674', '10000675', '10000676', '10000677', '10000678', '10000679', '10000680', '10000681', '10000682', '10000683', '10000684', '10000685', '10000686', '10000687', '10000688', '10000689', '10000690', '10000691', '10000692', '10000693', '10000694', '10000695', '10000696', '10000697', '10000698', '10000699', '10000700', '10000701', '10000702', '10000703', '10000704', '10000705', '10000706', '10000707', '10000708', '10000709', '10000710', '10000711', '10000712', '10000713', '10000714', '10000715', '10000716', '10000717', '10000718', '10000719', '10000720', '10000721', '10000722', '10000723', '10000724', '10000725', '10000726', '10000727', '10000728', '10000729', '10000730', '10000731', '10000732', '10000733', '10000734', '10000735', '10000736', '10000737', '10000738', '10000739', '10000740', '10000741', '10000742', '10000743', '10000744', '10000745', '10000746', '10000747', '10000748', '10000749', '10000750', '10000751', '10000752', '10000753', '10000754', '10000755', '10000756', '10000757', '10000758', '10000759', '10000760', '10000761', '10000762', '10000763', '10000764', '10000765', '10000766', '10000767', '10000768', '10000769', '10000770', '10000771', '10000772', '10000773', '10000774', '10000775', '10000776', '10000777', '10000778', '10000779', '10000780', '10000781', '10000782', '10000783', '10000784', '10000785', '10000786', '10000787', '10000788', '10000789', '10000790', '10000791', '10000792', '10000793', '10000794', '10000795', '10000796', '10000797', '10000798', '10000799', '10000800', '10000801', '10000802', '10000803', '10000804', '10000805', '10000806', '10000807', '10000808', '10000809', '10000810', '10000811', '10000812', '10000813', '10000814', '10000815', '10000816', '10000817', '10000818', '10000819', '10000820', '10000821', '10000822', '10000823', '10000824', '10000825', '10000826', '10000827', '10000828', '10000829', '10000830', '10000831', '10000832', '10000833', '10000834', '10000835', '10000836', '10000837', '10000838', '10000839', '10000840', '10000841', '10000842', '10000843', '10000844', '10000845', '10000846', '10000847', '10000848', '10000849', '10000850', '10000851', '10000852', '10000853', '10000854', '10000855', '10000856', '10000857', '10000858', '10000859', '10000860', '10000861', '10000862', '10000863', '10000864', '10000865', '10000866', '10000867', '10000868', '10000869', '10000870', '10000871', '10000872', '10000873', '10000874', '10000875', '10000876', '10000877', '10000878', '10000879', '10000880', '10000881', '10000882', '10000883', '10000884', '10000885', '10000886', '10000887', '10000888', '10000889', '10000890', '10000891', '10000892', '10000893', '10000894', '10000895', '10000896', '10000897', '10000898', '10000899', '10000900', '10000901', '10000902', '10000903', '10000904', '10000905', '10000906', '10000907', '10000908', '10000909', '10000910', '10000911', '10000912', '10000913', '10000914', '10000915', '10000916', '10000917', '10000918', '10000919', '10000920', '10000921', '10000922', '10000923', '10000924', '10000925', '10000926', '10000927', '10000928', '10000929', '10000930', '10000931', '10000932', '10000933', '10000934', '10000935', '10000936', '10000937', '10000938', '10000939', '10000940', '10000941', '10000942', '10000943', '10000944', '10000945', '10000946', '10000947', '10000948', '10000949', '10000950', '10000951', '10000952', '10000953', '10000954', '10000955', '10000956', '10000957', '10000958', '10000959', '10000960', '10000961', '10000962', '10000963', '10000964', '10000965', '10000966', '10000967', '10000968'], ['认购', '认购', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认沽', '认沽', '认购', '认购', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认沽', '认沽', '认购', '认购', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认沽', '认沽', '认购', '认购', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认沽', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认购', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认沽', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认购', '认沽', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认购', '认沽', '认沽', '认购', '认购', '认沽', '认沽', '认购', '认购', '认沽', '认沽', '认购', '认购', '认沽', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认购', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认沽', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认购', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认沽', '认沽', '认购', '认购', '认沽', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认购', '认购', '认沽', '认沽', '认购', '认购', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认沽', '认沽', '认购', '认购', '认沽', '认沽', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认购', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认沽', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认购', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认沽', '认沽', '认购', '认沽', '认购', '认购', '认沽', '认沽', '认购', '认购', '认沽', '认沽', '认购', '认购', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认沽', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认购', '认沽', '认沽', '认购', '认沽', '认购', '认购', '认沽', '认沽', '认购', '认购', '认沽', '认沽', '认购', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认沽', '认购', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认沽', '认购', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认沽', '认购', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认沽', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认购', '认购', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认沽', '认沽', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认购', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认沽', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认购', '认沽', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认购', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认沽', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认购', '认沽', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认购', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认沽', '认沽', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认购', '认沽', '认购', '认购', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认沽', '认沽', '认购', '认购', '认沽', '认沽', '认购', '认购', '认沽', '认沽', '认购', '认购', '认沽', '认沽', '认购', '认购', '认沽', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认购', '认沽', '认沽', '认购', '认购', '认沽', '认沽', '认购', '认购', '认沽', '认沽', '认购', '认购', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认沽', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认购', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认沽', '认沽', '认购', '认购', '认沽', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认购', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认沽', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认购', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认沽', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认购', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认沽', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认购', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认沽', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认购', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认沽', '认沽', '认购', '认沽', '认购', '认购', '认沽', '认沽', '认购', '认购', '认沽', '认沽', '认购', '认购', '认沽', '认沽', '认购', '认购', '认沽', '认沽', '认购', '认购', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认沽', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认购', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认沽', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认购', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认沽', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认购', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认沽', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认购', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认沽', '认沽', '认购', '认购', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认沽', '认沽', '认购', '认购', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认沽', '认沽', '认购', '认购', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认沽', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认购', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认沽', '认沽', '认购', '认沽', '认购', '认购', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认沽', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认购', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认沽', '认沽', '认购', '认沽', '认购', '认购', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认沽', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认购', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认沽', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认购', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认沽', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认购', '认购', '认购', '认购', '认沽', '认沽', '认沽', '认沽', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽', '认购', '认沽'], [2.2, 2.25, 2.3, 2.35, 2.4, 2.2, 2.25, 2.3, 2.35, 2.4, 2.2, 2.25, 2.3, 2.35, 2.4, 2.2, 2.25, 2.3, 2.35, 2.4, 2.2, 2.25, 2.3, 2.35, 2.4, 2.2, 2.25, 2.3, 2.35, 2.4, 2.2, 2.25, 2.3, 2.35, 2.4, 2.2, 2.25, 2.3, 2.35, 2.4, 2.45, 2.45, 2.45, 2.45, 2.45, 2.45, 2.45, 2.45, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.55, 2.55, 2.55, 2.55, 2.55, 2.55, 2.55, 2.55, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.65, 2.65, 2.65, 2.65, 2.65, 2.65, 2.65, 2.65, 2.7, 2.7, 2.7, 2.7, 2.7, 2.7, 2.7, 2.7, 2.75, 2.75, 2.75, 2.75, 2.75, 2.75, 2.75, 2.75, 2.8, 2.8, 2.8, 2.8, 2.8, 2.8, 2.8, 2.8, 2.5, 2.55, 2.6, 2.65, 2.7, 2.5, 2.55, 2.6, 2.65, 2.7, 2.75, 2.75, 2.85, 2.85, 2.8, 2.85, 2.8, 2.85, 2.85, 2.85, 2.85, 2.85, 2.9, 2.95, 2.9, 2.95, 2.9, 2.95, 2.9, 2.95, 2.9, 2.95, 2.9, 2.95, 2.9, 2.95, 2.9, 2.95, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.1, 3.1, 3.1, 3.1, 3.1, 3.1, 3.1, 3.1, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.4, 3.4, 3.4, 3.4, 3.4, 3.4, 3.4, 3.4, 3.0, 3.1, 3.2, 3.3, 3.4, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 2.95, 2.95, 2.9, 2.9, 2.85, 2.85, 3.1, 3.2, 3.3, 3.4, 3.5, 3.1, 3.2, 3.3, 3.4, 3.5, 2.95, 3.0, 2.95, 3.0, 3.6, 3.6, 3.6, 3.6, 3.6, 3.6, 3.6, 3.6, 2.9, 2.9, 2.75, 2.8, 2.85, 2.75, 2.8, 2.85, 2.75, 2.8, 2.75, 2.8, 2.9, 2.95, 3.0, 3.1, 3.2, 2.9, 2.95, 3.0, 3.1, 3.2, 2.8, 2.85, 2.8, 2.85, 2.6, 2.65, 2.7, 2.6, 2.65, 2.7, 2.6, 2.65, 2.7, 2.75, 2.6, 2.65, 2.7, 2.75, 2.6, 2.65, 2.7, 2.6, 2.65, 2.7, 2.55, 2.55, 2.55, 2.55, 2.55, 2.55, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.65, 2.7, 2.75, 2.8, 2.85, 2.65, 2.7, 2.75, 2.8, 2.85, 2.9, 2.9, 2.4, 2.45, 2.4, 2.45, 2.4, 2.45, 2.4, 2.45, 2.4, 2.45, 2.5, 2.55, 2.6, 2.4, 2.45, 2.5, 2.55, 2.6, 2.35, 2.35, 2.35, 2.35, 2.35, 2.35, 2.3, 2.3, 2.3, 2.3, 2.3, 2.3, 2.25, 2.25, 2.25, 2.25, 2.25, 2.25, 2.15, 2.2, 2.15, 2.2, 2.15, 2.15, 2.15, 2.2, 2.15, 2.2, 2.15, 2.2, 2.15, 2.2, 1.95, 2.0, 2.05, 2.1, 1.95, 2.0, 2.05, 2.1, 1.95, 2.0, 2.05, 2.1, 1.95, 2.0, 2.05, 2.1, 1.95, 2.0, 2.05, 2.1, 1.95, 2.0, 2.05, 2.1, 1.95, 2.0, 2.05, 2.1, 1.95, 2.0, 2.05, 2.1, 1.8, 1.85, 1.9, 1.8, 1.85, 1.9, 1.8, 1.85, 1.9, 1.8, 1.85, 1.9, 1.8, 1.85, 1.9, 1.8, 1.85, 1.9, 1.8, 1.85, 1.9, 1.8, 1.85, 1.9, 1.85, 1.9, 1.95, 2.0, 2.05, 1.85, 1.9, 1.95, 2.0, 2.05, 2.1, 2.15, 2.2, 2.1, 2.15, 2.2, 2.25, 2.25, 2.3, 2.3, 2.35, 2.35, 2.1, 2.15, 2.2, 2.25, 2.3, 2.1, 2.15, 2.2, 2.25, 2.3, 2.05, 2.05, 2.4, 2.4, 2.35, 2.4, 2.35, 2.4, 2.45, 2.45, 2.45, 2.45, 2.2, 2.25, 2.3, 2.35, 2.4, 2.2, 2.25, 2.3, 2.35, 2.4, 2.15, 2.15, 2.5, 2.5, 2.45, 2.5, 2.45, 2.5, 2.55, 2.55, 2.55, 2.55, 2.6, 2.6, 2.6, 2.6, 2.65, 2.65, 2.65, 2.65, 2.35, 2.4, 2.45, 2.5, 2.55, 2.35, 2.4, 2.45, 2.5, 2.55, 2.2, 2.25, 2.3, 2.2, 2.25, 2.3, 2.6, 2.6, 2.4, 2.45, 2.5, 2.55, 2.6, 2.4, 2.45, 2.5, 2.55, 2.6, 2.3, 2.35, 2.3, 2.35, 2.2, 2.25, 2.2, 2.25, 2.1, 2.15, 2.1, 2.15, 2.1, 2.15, 2.1, 2.15, 2.1, 2.1, 2.05, 2.05, 2.05, 2.05, 2.05, 2.05, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 1.95, 1.95, 1.95, 1.95, 1.95, 1.95, 1.85, 1.9, 1.85, 1.9, 1.85, 1.9, 1.85, 1.9, 1.85, 1.9, 1.85, 1.9, 1.85, 1.9, 1.95, 2.0, 2.05, 1.85, 1.9, 1.95, 2.0, 2.05, 1.8, 1.8, 1.8, 1.8, 1.8, 1.8, 2.1, 2.1, 2.15, 2.15, 1.95, 2.0, 2.05, 2.1, 2.15, 1.95, 2.0, 2.05, 2.1, 2.15, 1.85, 1.9, 1.85, 1.9, 2.2, 2.2, 2.2, 2.2, 2.25, 2.25, 2.25, 2.25, 2.3, 2.3, 2.3, 2.3, 2.05, 2.1, 2.15, 2.2, 2.25, 2.05, 2.1, 2.15, 2.2, 2.25, 2.0, 2.0, 2.3, 2.3, 2.006, 2.055, 2.104, 2.153, 2.202, 2.006, 2.055, 2.104, 2.153, 2.202, 1.957, 1.957, 1.95, 1.95, 1.908, 1.908, 1.95, 2.0, 2.05, 2.1, 2.15, 1.95, 2.0, 2.05, 2.1, 2.15, 2.2, 2.2, 2.25, 2.25, 2.0, 2.05, 2.1, 2.15, 2.2, 2.0, 2.05, 2.1, 2.15, 2.2, 2.25, 2.25, 2.3, 2.3, 2.3, 2.3, 2.25, 2.25, 2.35, 2.35, 2.35, 2.35, 2.35, 2.35, 2.299, 2.299, 2.055, 2.104, 2.153, 2.202, 2.25, 2.055, 2.104, 2.153, 2.202, 2.25, 2.299, 2.299, 2.4, 2.45, 2.4, 2.45, 2.4, 2.45, 2.4, 2.45, 2.348, 2.397, 2.348, 2.397, 2.348, 2.397, 2.348, 2.397, 2.2, 2.25, 2.3, 2.35, 2.4, 2.2, 2.25, 2.3, 2.35, 2.4, 2.15, 2.15, 2.1, 2.1, 2.1, 2.15, 2.2, 2.25, 2.3, 2.1, 2.15, 2.2, 2.25, 2.3, 2.35, 2.35, 2.4, 2.4, 2.153, 2.202, 2.25, 2.299, 2.348, 2.153, 2.202, 2.25, 2.299, 2.348, 2.45, 2.45, 2.397, 2.397, 2.5, 2.5, 2.446, 2.446, 2.446, 2.446, 2.446, 2.446, 2.25, 2.299, 2.348, 2.397, 2.446, 2.25, 2.299, 2.348, 2.397, 2.446, 2.495, 2.495, 2.495, 2.495, 2.495, 2.495, 2.495, 2.495, 2.3, 2.35, 2.4, 2.45, 2.5, 2.3, 2.35, 2.4, 2.45, 2.5, 2.3, 2.35, 2.4, 2.45, 2.5, 2.3, 2.35, 2.4, 2.45, 2.5, 2.3, 2.35, 2.4, 2.45, 2.5, 2.3, 2.35, 2.4, 2.45, 2.5, 2.3, 2.35, 2.4, 2.45, 2.5, 2.3, 2.35, 2.4, 2.45, 2.5, 2.55, 2.55, 2.55, 2.55, 2.55, 2.55, 2.55, 2.55, 2.25, 2.25, 2.25, 2.25, 2.25, 2.25, 2.25, 2.25, 2.2, 2.2, 2.2, 2.2, 2.2, 2.2, 2.2, 2.2, 2.2, 2.25, 2.3, 2.35, 2.4, 2.2, 2.25, 2.3, 2.35, 2.4, 2.45, 2.45, 2.25, 2.3, 2.35, 2.4, 2.45, 2.25, 2.3, 2.35, 2.4, 2.45, 2.5, 2.5, 2.5, 2.5, 2.3, 2.35, 2.4, 2.45, 2.5, 2.3, 2.35, 2.4, 2.45, 2.5, 2.25, 2.25, 2.25, 2.3, 2.35, 2.4, 2.45, 2.25, 2.3, 2.35, 2.4, 2.45, 2.5, 2.5, 2.2, 2.2, 2.2, 2.2, 2.2, 2.2, 2.25, 2.3, 2.35, 2.4, 2.45, 2.25, 2.3, 2.35, 2.4, 2.45, 2.2, 2.2, 2.5, 2.5, 2.3, 2.35, 2.4, 2.45, 2.5, 2.3, 2.35, 2.4, 2.45, 2.5, 2.55, 2.55, 2.55, 2.55, 2.55, 2.55, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.6, 2.65, 2.65, 2.65, 2.65, 2.65, 2.65, 2.65, 2.65, 2.45, 2.5, 2.55, 2.6, 2.65, 2.45, 2.5, 2.55, 2.6, 2.65, 2.4, 2.4, 2.7, 2.7, 2.7, 2.7, 2.7, 2.7, 2.7, 2.7, 2.75, 2.75, 2.75, 2.75, 2.75, 2.75, 2.75, 2.75, 2.8, 2.8, 2.8, 2.8, 2.8, 2.8, 2.8, 2.8], ['2015-03-25', '2015-03-25', '2015-03-25', '2015-03-25', '2015-03-25', '2015-03-25', '2015-03-25', '2015-03-25', '2015-03-25', '2015-03-25', '2015-04-22', '2015-04-22', '2015-04-22', '2015-04-22', '2015-04-22', '2015-04-22', '2015-04-22', '2015-04-22', '2015-04-22', '2015-04-22', '2015-06-24', '2015-06-24', '2015-06-24', '2015-06-24', '2015-06-24', '2015-06-24', '2015-06-24', '2015-06-24', '2015-06-24', '2015-06-24', '2015-09-23', '2015-09-23', '2015-09-23', '2015-09-23', '2015-09-23', '2015-09-23', '2015-09-23', '2015-09-23', '2015-09-23', '2015-09-23', '2015-03-25', '2015-03-25', '2015-04-22', '2015-04-22', '2015-06-24', '2015-06-24', '2015-09-23', '2015-09-23', '2015-03-25', '2015-03-25', '2015-04-22', '2015-04-22', '2015-06-24', '2015-06-24', '2015-09-23', '2015-09-23', '2015-03-25', '2015-03-25', '2015-04-22', '2015-04-22', '2015-06-24', '2015-06-24', '2015-09-23', '2015-09-23', '2015-03-25', '2015-03-25', '2015-04-22', '2015-04-22', '2015-06-24', '2015-06-24', '2015-09-23', '2015-09-23', '2015-03-25', '2015-03-25', '2015-04-22', '2015-04-22', '2015-06-24', '2015-06-24', '2015-09-23', '2015-09-23', '2015-03-25', '2015-03-25', '2015-04-22', '2015-04-22', '2015-06-24', '2015-06-24', '2015-09-23', '2015-09-23', '2015-03-25', '2015-03-25', '2015-04-22', '2015-04-22', '2015-06-24', '2015-06-24', '2015-09-23', '2015-09-23', '2015-03-25', '2015-03-25', '2015-04-22', '2015-04-22', '2015-06-24', '2015-06-24', '2015-09-23', '2015-09-23', '2015-05-27', '2015-05-27', '2015-05-27', '2015-05-27', '2015-05-27', '2015-05-27', '2015-05-27', '2015-05-27', '2015-05-27', '2015-05-27', '2015-05-27', '2015-05-27', '2015-04-22', '2015-04-22', '2015-05-27', '2015-05-27', '2015-05-27', '2015-05-27', '2015-06-24', '2015-06-24', '2015-09-23', '2015-09-23', '2015-04-22', '2015-04-22', '2015-04-22', '2015-04-22', '2015-05-27', '2015-05-27', '2015-05-27', '2015-05-27', '2015-06-24', '2015-06-24', '2015-06-24', '2015-06-24', '2015-09-23', '2015-09-23', '2015-09-23', '2015-09-23', '2015-04-22', '2015-04-22', '2015-05-27', '2015-05-27', '2015-06-24', '2015-06-24', '2015-09-23', '2015-09-23', '2015-04-22', '2015-04-22', '2015-05-27', '2015-05-27', '2015-06-24', '2015-06-24', '2015-09-23', '2015-09-23', '2015-04-22', '2015-04-22', '2015-05-27', '2015-05-27', '2015-06-24', '2015-06-24', '2015-09-23', '2015-09-23', '2015-04-22', '2015-04-22', '2015-05-27', '2015-05-27', '2015-06-24', '2015-06-24', '2015-09-23', '2015-09-23', '2015-04-22', '2015-04-22', '2015-05-27', '2015-05-27', '2015-06-24', '2015-06-24', '2015-09-23', '2015-09-23', '2015-12-23', '2015-12-23', '2015-12-23', '2015-12-23', '2015-12-23', '2015-12-23', '2015-12-23', '2015-12-23', '2015-12-23', '2015-12-23', '2015-05-27', '2015-05-27', '2015-06-24', '2015-06-24', '2015-09-23', '2015-09-23', '2015-12-23', '2015-12-23', '2015-12-23', '2015-12-23', '2015-12-23', '2015-12-23', '2015-12-23', '2015-12-23', '2015-07-22', '2015-07-22', '2015-07-22', '2015-07-22', '2015-07-22', '2015-07-22', '2015-07-22', '2015-07-22', '2015-07-22', '2015-07-22', '2015-07-22', '2015-07-22', '2015-07-22', '2015-07-22', '2015-06-24', '2015-06-24', '2015-07-22', '2015-07-22', '2015-09-23', '2015-09-23', '2015-12-23', '2015-12-23', '2015-07-22', '2015-07-22', '2015-07-22', '2015-07-22', '2015-07-22', '2015-07-22', '2015-07-22', '2015-07-22', '2015-12-23', '2015-12-23', '2015-12-23', '2015-12-23', '2015-08-26', '2015-08-26', '2015-08-26', '2015-08-26', '2015-08-26', '2015-08-26', '2015-08-26', '2015-08-26', '2015-08-26', '2015-08-26', '2015-08-26', '2015-08-26', '2015-08-26', '2015-08-26', '2015-07-22', '2015-07-22', '2015-07-22', '2015-07-22', '2015-07-22', '2015-07-22', '2015-08-26', '2015-08-26', '2015-08-26', '2015-08-26', '2015-08-26', '2015-08-26', '2015-08-26', '2015-08-26', '2015-12-23', '2015-12-23', '2015-12-23', '2015-12-23', '2015-12-23', '2015-12-23', '2015-07-22', '2015-07-22', '2015-08-26', '2015-08-26', '2015-12-23', '2015-12-23', '2015-07-22', '2015-07-22', '2015-08-26', '2015-08-26', '2015-12-23', '2015-12-23', '2016-03-23', '2016-03-23', '2016-03-23', '2016-03-23', '2016-03-23', '2016-03-23', '2016-03-23', '2016-03-23', '2016-03-23', '2016-03-23', '2016-03-23', '2016-03-23', '2015-08-26', '2015-08-26', '2015-08-26', '2015-08-26', '2015-12-23', '2015-12-23', '2015-12-23', '2015-12-23', '2016-03-23', '2016-03-23', '2016-03-23', '2016-03-23', '2016-03-23', '2016-03-23', '2016-03-23', '2016-03-23', '2016-03-23', '2016-03-23', '2015-08-26', '2015-08-26', '2015-12-23', '2015-12-23', '2016-03-23', '2016-03-23', '2015-08-26', '2015-08-26', '2015-12-23', '2015-12-23', '2016-03-23', '2016-03-23', '2015-08-26', '2015-08-26', '2015-12-23', '2015-12-23', '2016-03-23', '2016-03-23', '2015-08-26', '2015-08-26', '2015-08-26', '2015-08-26', '2015-09-23', '2015-09-23', '2015-12-23', '2015-12-23', '2015-12-23', '2015-12-23', '2016-03-23', '2016-03-23', '2016-03-23', '2016-03-23', '2015-08-26', '2015-08-26', '2015-08-26', '2015-08-26', '2015-08-26', '2015-08-26', '2015-08-26', '2015-08-26', '2015-09-23', '2015-09-23', '2015-09-23', '2015-09-23', '2015-09-23', '2015-09-23', '2015-09-23', '2015-09-23', '2015-12-23', '2015-12-23', '2015-12-23', '2015-12-23', '2015-12-23', '2015-12-23', '2015-12-23', '2015-12-23', '2016-03-23', '2016-03-23', '2016-03-23', '2016-03-23', '2016-03-23', '2016-03-23', '2016-03-23', '2016-03-23', '2015-08-26', '2015-08-26', '2015-08-26', '2015-08-26', '2015-08-26', '2015-08-26', '2015-09-23', '2015-09-23', '2015-09-23', '2015-09-23', '2015-09-23', '2015-09-23', '2015-12-23', '2015-12-23', '2015-12-23', '2015-12-23', '2015-12-23', '2015-12-23', '2016-03-23', '2016-03-23', '2016-03-23', '2016-03-23', '2016-03-23', '2016-03-23', '2015-10-28', '2015-10-28', '2015-10-28', '2015-10-28', '2015-10-28', '2015-10-28', '2015-10-28', '2015-10-28', '2015-10-28', '2015-10-28', '2015-10-28', '2015-10-28', '2015-10-28', '2015-10-28', '2015-10-28', '2015-10-28', '2015-10-28', '2015-10-28', '2015-10-28', '2015-10-28', '2015-10-28', '2015-10-28', '2015-11-25', '2015-11-25', '2015-11-25', '2015-11-25', '2015-11-25', '2015-11-25', '2015-11-25', '2015-11-25', '2015-11-25', '2015-11-25', '2015-11-25', '2015-11-25', '2015-10-28', '2015-10-28', '2015-11-25', '2015-11-25', '2015-11-25', '2015-11-25', '2015-10-28', '2015-10-28', '2015-11-25', '2015-11-25', '2016-06-22', '2016-06-22', '2016-06-22', '2016-06-22', '2016-06-22', '2016-06-22', '2016-06-22', '2016-06-22', '2016-06-22', '2016-06-22', '2016-06-22', '2016-06-22', '2015-11-25', '2015-11-25', '2016-06-22', '2016-06-22', '2016-06-22', '2016-06-22', '2015-11-25', '2015-11-25', '2016-06-22', '2016-06-22', '2015-11-25', '2015-11-25', '2016-06-22', '2016-06-22', '2015-11-25', '2015-11-25', '2016-06-22', '2016-06-22', '2016-01-27', '2016-01-27', '2016-01-27', '2016-01-27', '2016-01-27', '2016-01-27', '2016-01-27', '2016-01-27', '2016-01-27', '2016-01-27', '2016-01-27', '2016-01-27', '2016-01-27', '2016-01-27', '2016-01-27', '2016-01-27', '2016-01-27', '2016-01-27', '2016-02-24', '2016-02-24', '2016-02-24', '2016-02-24', '2016-02-24', '2016-02-24', '2016-02-24', '2016-02-24', '2016-02-24', '2016-02-24', '2016-02-24', '2016-02-24', '2016-02-24', '2016-02-24', '2016-02-24', '2016-02-24', '2016-02-24', '2016-02-24', '2016-01-27', '2016-01-27', '2016-01-27', '2016-01-27', '2016-02-24', '2016-02-24', '2016-02-24', '2016-02-24', '2016-06-22', '2016-06-22', '2016-01-27', '2016-01-27', '2016-02-24', '2016-02-24', '2016-06-22', '2016-06-22', '2016-01-27', '2016-01-27', '2016-02-24', '2016-02-24', '2016-06-22', '2016-06-22', '2016-01-27', '2016-01-27', '2016-02-24', '2016-02-24', '2016-06-22', '2016-06-22', '2016-01-27', '2016-01-27', '2016-01-27', '2016-01-27', '2016-02-24', '2016-02-24', '2016-02-24', '2016-02-24', '2016-06-22', '2016-06-22', '2016-06-22', '2016-06-22', '2016-09-28', '2016-09-28', '2016-09-28', '2016-09-28', '2016-09-28', '2016-09-28', '2016-09-28', '2016-09-28', '2016-09-28', '2016-09-28', '2016-02-24', '2016-02-24', '2016-06-22', '2016-06-22', '2016-09-28', '2016-09-28', '2016-09-28', '2016-09-28', '2016-09-28', '2016-09-28', '2016-04-27', '2016-04-27', '2016-04-27', '2016-04-27', '2016-04-27', '2016-04-27', '2016-04-27', '2016-04-27', '2016-04-27', '2016-04-27', '2016-04-27', '2016-04-27', '2016-04-27', '2016-04-27', '2016-04-27', '2016-04-27', '2016-09-28', '2016-09-28', '2016-04-27', '2016-04-27', '2016-09-28', '2016-09-28', '2016-04-27', '2016-04-27', '2016-09-28', '2016-09-28', '2016-05-25', '2016-05-25', '2016-05-25', '2016-05-25', '2016-05-25', '2016-05-25', '2016-05-25', '2016-05-25', '2016-05-25', '2016-05-25', '2016-05-25', '2016-05-25', '2016-05-25', '2016-05-25', '2016-12-28', '2016-12-28', '2016-12-28', '2016-12-28', '2016-12-28', '2016-12-28', '2016-12-28', '2016-12-28', '2016-12-28', '2016-12-28', '2016-12-28', '2016-12-28', '2016-05-25', '2016-05-25', '2016-12-28', '2016-12-28', '2016-07-27', '2016-07-27', '2016-07-27', '2016-07-27', '2016-07-27', '2016-07-27', '2016-07-27', '2016-07-27', '2016-07-27', '2016-07-27', '2016-07-27', '2016-07-27', '2016-07-27', '2016-07-27', '2016-08-24', '2016-08-24', '2016-08-24', '2016-08-24', '2016-08-24', '2016-08-24', '2016-08-24', '2016-08-24', '2016-08-24', '2016-08-24', '2016-08-24', '2016-08-24', '2016-07-27', '2016-07-27', '2016-08-24', '2016-08-24', '2016-12-28', '2016-12-28', '2016-07-27', '2016-07-27', '2016-08-24', '2016-08-24', '2016-09-28', '2016-09-28', '2016-12-28', '2016-12-28', '2017-03-22', '2017-03-22', '2017-03-22', '2017-03-22', '2017-03-22', '2017-03-22', '2017-03-22', '2017-03-22', '2017-03-22', '2017-03-22', '2017-03-22', '2017-03-22', '2016-08-24', '2016-08-24', '2016-08-24', '2016-08-24', '2016-09-28', '2016-09-28', '2016-09-28', '2016-09-28', '2016-12-28', '2016-12-28', '2016-12-28', '2016-12-28', '2017-03-22', '2017-03-22', '2017-03-22', '2017-03-22', '2016-10-26', '2016-10-26', '2016-10-26', '2016-10-26', '2016-10-26', '2016-10-26', '2016-10-26', '2016-10-26', '2016-10-26', '2016-10-26', '2016-10-26', '2016-10-26', '2016-10-26', '2016-10-26', '2016-11-23', '2016-11-23', '2016-11-23', '2016-11-23', '2016-11-23', '2016-11-23', '2016-11-23', '2016-11-23', '2016-11-23', '2016-11-23', '2016-11-23', '2016-11-23', '2016-11-23', '2016-11-23', '2017-06-28', '2017-06-28', '2017-06-28', '2017-06-28', '2017-06-28', '2017-06-28', '2017-06-28', '2017-06-28', '2017-06-28', '2017-06-28', '2016-11-23', '2016-11-23', '2017-06-28', '2017-06-28', '2016-11-23', '2016-11-23', '2016-12-28', '2016-12-28', '2017-03-22', '2017-03-22', '2017-06-28', '2017-06-28', '2017-01-25', '2017-01-25', '2017-01-25', '2017-01-25', '2017-01-25', '2017-01-25', '2017-01-25', '2017-01-25', '2017-01-25', '2017-01-25', '2016-12-28', '2016-12-28', '2017-01-25', '2017-01-25', '2017-03-22', '2017-03-22', '2017-06-28', '2017-06-28', '2016-12-28', '2016-12-28', '2016-12-28', '2016-12-28', '2016-12-28', '2016-12-28', '2016-12-28', '2016-12-28', '2016-12-28', '2016-12-28', '2017-01-25', '2017-01-25', '2017-01-25', '2017-01-25', '2017-01-25', '2017-01-25', '2017-01-25', '2017-01-25', '2017-01-25', '2017-01-25', '2017-03-22', '2017-03-22', '2017-03-22', '2017-03-22', '2017-03-22', '2017-03-22', '2017-03-22', '2017-03-22', '2017-03-22', '2017-03-22', '2017-06-28', '2017-06-28', '2017-06-28', '2017-06-28', '2017-06-28', '2017-06-28', '2017-06-28', '2017-06-28', '2017-06-28', '2017-06-28', '2016-12-28', '2016-12-28', '2017-01-25', '2017-01-25', '2017-03-22', '2017-03-22', '2017-06-28', '2017-06-28', '2016-12-28', '2016-12-28', '2017-01-25', '2017-01-25', '2017-03-22', '2017-03-22', '2017-06-28', '2017-06-28', '2016-12-28', '2016-12-28', '2017-01-25', '2017-01-25', '2017-03-22', '2017-03-22', '2017-06-28', '2017-06-28', '2017-02-22', '2017-02-22', '2017-02-22', '2017-02-22', '2017-02-22', '2017-02-22', '2017-02-22', '2017-02-22', '2017-02-22', '2017-02-22', '2017-02-22', '2017-02-22', '2017-09-27', '2017-09-27', '2017-09-27', '2017-09-27', '2017-09-27', '2017-09-27', '2017-09-27', '2017-09-27', '2017-09-27', '2017-09-27', '2017-02-22', '2017-02-22', '2017-09-27', '2017-09-27', '2017-04-26', '2017-04-26', '2017-04-26', '2017-04-26', '2017-04-26', '2017-04-26', '2017-04-26', '2017-04-26', '2017-04-26', '2017-04-26', '2017-04-26', '2017-04-26', '2017-05-24', '2017-05-24', '2017-05-24', '2017-05-24', '2017-05-24', '2017-05-24', '2017-05-24', '2017-05-24', '2017-05-24', '2017-05-24', '2017-05-24', '2017-05-24', '2017-04-26', '2017-04-26', '2017-05-24', '2017-05-24', '2017-09-27', '2017-09-27', '2017-12-27', '2017-12-27', '2017-12-27', '2017-12-27', '2017-12-27', '2017-12-27', '2017-12-27', '2017-12-27', '2017-12-27', '2017-12-27', '2017-12-27', '2017-12-27', '2017-12-27', '2017-12-27', '2017-07-26', '2017-07-26', '2017-07-26', '2017-07-26', '2017-07-26', '2017-07-26', '2017-07-26', '2017-07-26', '2017-07-26', '2017-07-26', '2017-07-26', '2017-07-26', '2017-09-27', '2017-09-27', '2017-12-27', '2017-12-27', '2017-06-28', '2017-06-28', '2017-07-26', '2017-07-26', '2017-09-27', '2017-09-27', '2017-12-27', '2017-12-27', '2017-06-28', '2017-06-28', '2017-07-26', '2017-07-26', '2017-09-27', '2017-09-27', '2017-12-27', '2017-12-27', '2017-08-23', '2017-08-23', '2017-08-23', '2017-08-23', '2017-08-23', '2017-08-23', '2017-08-23', '2017-08-23', '2017-08-23', '2017-08-23', '2017-08-23', '2017-08-23', '2017-07-26', '2017-07-26', '2017-08-23', '2017-08-23', '2017-09-27', '2017-09-27', '2017-12-27', '2017-12-27', '2017-07-26', '2017-07-26', '2017-08-23', '2017-08-23', '2017-09-27', '2017-09-27', '2017-12-27', '2017-12-27', '2017-07-26', '2017-07-26', '2017-08-23', '2017-08-23', '2017-09-27', '2017-09-27', '2017-12-27', '2017-12-27']]

        # 50ETF market price data
        query       = "startdate="+ datestr +";enddate="+datestr+";exchange=sse;windcode=510050.SH;field=date,option_code,option_name,amount,pre_settle,open,highest,lowest,close,settlement_price"
        mkt         = w.wset("optiondailyquotationstastics",query)
        mktFlds     = mkt.Fields
        mktData     = mkt.Data
        # Uderlying market price
        underlying   = w.wsd("510050.SH", "close,settle", datestr, datestr, "Fill=Previous;PriceAdj=F")
        spot  = underlying.Data[0][0]
        # Prepare strikes,maturity dates for BlackVarianceSurface
        optionids   = mktData[mktFlds.index('option_code')]
        optionids_SH = []
        for i, id in enumerate(optionids):
            id_sh = id + '.SH'
            optionids_SH.append(id_sh)
        voldata = w.wss(optionids_SH, "us_impliedvol", "tradeDate=20170612")
        vols = voldata.Data[0]
    except:
        print('VolatilityData -- get_wind_data failed')
        return
    return vols,spot,mktData,mktFlds,optionData,optionFlds,optionids

def get_contract_months(evalDate):
    if evalDate.month() == 12:
        m2 = 1
    else:
        m2 = evalDate.month() + 1
    if evalDate.month() in [11,12,1]:
        m3 = 3
        m4 = 6
    elif evalDate.month() in [2,3,4]:
        m3 = 6
        m4 = 9
    elif evalDate.month() in [5,6,7]:
        m3 = 9
        m4 = 12
    else:
        m3 = 12
        m4 = 3
    month_indexs = [evalDate.month(), m2, m3, m4]
    return month_indexs

def get_call_put_impliedVols(evalDate,curve,daycounter,calendar,maxVol=1.0,step=0.0001,precision=0.001,show=True):
    close_call = []
    close_put = []
    strikes_call = []
    strikes_put = []
    call_volatilities_0 = {}
    call_volatilities_1 = {}
    call_volatilities_2 = {}
    call_volatilities_3 = {}
    put_volatilites_0 = {}
    put_volatilites_1 = {}
    put_volatilites_2 = {}
    put_volatilites_3 = {}
    maturitydt = 0.0
    return_data = {}
    try:
        # Get Wind Market Data
        vols, spot, mktData, mktFlds, optionData, optionFlds,optionids = get_wind_data(evalDate)
        ql.Settings.instance().evaluationDate = evalDate
        yield_ts = ql.YieldTermStructureHandle(curve)
        dividend_ts = ql.YieldTermStructureHandle(ql.FlatForward(evalDate,0.0,daycounter))

        month_indexs = get_contract_months(evalDate)
        for idx,optionid in enumerate(optionids):
            optionDataIdx   = optionData[optionFlds.index('wind_code')].index(optionid)
            mdate           = pd.to_datetime(optionData[optionFlds.index('exercise_date')][optionDataIdx])

            maturitydt  = ql.Date(mdate.day, mdate.month, mdate.year)
            mktindex    = mktData[mktFlds.index('option_code')].index(optionid)
            strike      = optionData[optionFlds.index('exercise_price')][optionDataIdx]
            close       = mktData[mktFlds.index('close')][mktindex]
            if optionData[optionFlds.index('call_or_put')][optionDataIdx] == '认购':
                optiontype  = ql.Option.Call
                implied_vol,error = calculate_vol_BS(maturitydt, optiontype, strike, spot, dividend_ts, yield_ts,
                                                         close, evalDate,calendar, daycounter, precision, maxVol, step)
                if mdate.month == month_indexs[0]:
                    call_volatilities_0.update({strike:implied_vol})
                elif mdate.month == month_indexs[1]:
                    call_volatilities_1.update({strike:implied_vol})
                elif mdate.month == month_indexs[2]:
                    call_volatilities_2.update({strike:implied_vol})
                else:
                    call_volatilities_3.update({strike:implied_vol})
                close_call.append(close)
            else:
                optiontype = ql.Option.Put
                implied_vol, error = calculate_vol_BS(maturitydt, optiontype, strike, spot, dividend_ts, yield_ts,
                                                          close, evalDate,calendar, daycounter, precision, maxVol, step)
                if mdate.month   == month_indexs[0]:
                    put_volatilites_0.update({strike:implied_vol})
                elif mdate.month == month_indexs[1]:
                    put_volatilites_1.update({strike:implied_vol})
                elif mdate.month == month_indexs[2]:
                    put_volatilites_2.update({strike:implied_vol})
                else:
                    put_volatilites_3.update({strike:implied_vol})
                close_put.append(close)

        #vol_spreads = np.array(put_volatilites) - np.array(call_volatilities)

        cal_vols = [call_volatilities_0,call_volatilities_1,call_volatilities_2,call_volatilities_3]
        put_vols = [put_volatilites_0,put_volatilites_1,put_volatilites_2,put_volatilites_3]
    except:
        print('VolatilityData -- get_call_put_impliedVols failed')
        return
    return cal_vols,put_vols

def get_impliedvolmat_BS_OTM_oneMaturity(evalDate,curve,daycounter,calendar,month,maxVol=1.0,step=0.0001,precision=0.001,show=True):
    try:
        # Get Wind Market Data
        vols, spot, mktData, mktFlds, optionData, optionFlds,optionids = get_wind_data(evalDate)
        ql.Settings.instance().evaluationDate = evalDate
        yield_ts = ql.YieldTermStructureHandle(curve)
        dividend_ts = ql.YieldTermStructureHandle(ql.FlatForward(evalDate,0.0,daycounter))
        vol_data = []
        close_call = []
        close_put = []
        logMoneyness_call = []
        logMoneyness_put = []
        strikes_call = []
        strikes_put = []
        call_volatilities = []
        put_converted_volatilites = []
        call_pair = []
        put_pair =[]
        maturitydt = 0.0
        for idx,optionid in enumerate(optionids):
            optionDataIdx   = optionData[optionFlds.index('wind_code')].index(optionid)
            mdate           = pd.to_datetime(optionData[optionFlds.index('exercise_date')][optionDataIdx])
            if mdate.month == month:
                mktindex    = mktData[mktFlds.index('option_code')].index(optionid)
                strike      = optionData[optionFlds.index('exercise_price')][optionDataIdx]
                close       = mktData[mktFlds.index('close')][mktindex]
                if optionData[optionFlds.index('call_or_put')][optionDataIdx] == '认购':
                    call_pair.append((strike,close))
                else:
                    put_pair.append((strike,close))
        call_pair.sort()
        put_pair.sort()
        error_pair = []
        for i in range(len(call_pair)):
            e = abs(call_pair[i][1] - put_pair[i][1])
            error_pair.append((e,call_pair[i][0]))
        error_pair.sort()
        Ft = error_pair[0][1]
        print('error_pair : ',error_pair)
        print('forward price : ',Ft)
        if show:
            print("="*110)
            print("%10s %10s %10s %10s %25s %25s %20s" % ("Type","Spot", "Strike", "close","moneyness", "impliedVol", "Error (%)"))
            print("-"*110)
        for idx,optionid in enumerate(optionids):
            optionDataIdx   = optionData[optionFlds.index('wind_code')].index(optionid)
            mdate           = pd.to_datetime(optionData[optionFlds.index('exercise_date')][optionDataIdx])
            if mdate.month == month:
                maturitydt  = ql.Date(mdate.day, mdate.month, mdate.year)
                mktindex    = mktData[mktFlds.index('option_code')].index(optionid)
                strike      = optionData[optionFlds.index('exercise_price')][optionDataIdx]
                close       = mktData[mktFlds.index('close')][mktindex]
                ttm         = daycounter.yearFraction(evalDate, maturitydt)
                rf          = curve.zeroRate(maturitydt,daycounter,ql.Continuous).rate()
                #Ft          = spot* math.exp(rf*ttm)
                optiontype  = ql.Option.Call
                if optionData[optionFlds.index('call_or_put')][optionDataIdx] == '认购':
                    eqvlt_close = close
                    implied_vol,error = calculate_vol_BS(maturitydt, optiontype, strike, spot, dividend_ts, yield_ts, eqvlt_close, evalDate,
                                     calendar, daycounter, precision, maxVol, step)
                    logMoneyness = math.log(strike / Ft, math.e)
                    logMoneyness_call.append(logMoneyness)
                    strikes_call.append(strike)
                    call_volatilities.append(implied_vol)
                    close_call.append(close)
                    if show: print(
                        "%10s %10s %10s %10s %25s %25s %20s" % ('Call',spot, strike, close, logMoneyness, implied_vol, error))
                else:
                    eqvlt_close = close + spot - math.exp(-rf*ttm) * strike
                    implied_vol, error = calculate_vol_BS(maturitydt, optiontype, strike, spot, dividend_ts, yield_ts,
                                                          eqvlt_close, evalDate,
                                                          calendar, daycounter, precision, maxVol, step)
                    logMoneyness = math.log(strike / Ft, math.e)
                    logMoneyness_put.append(logMoneyness)
                    strikes_put.append(strike)
                    put_converted_volatilites.append(implied_vol)
                    close_put.append(close)
                    if show: print(
                        "%10s %10s %10s %10s %25s %25s %20s" % ('Put', spot, strike, close, logMoneyness, implied_vol, error))
        if show : print("-"*110)
        #print('vols:', vol_data)
        #print('close prices: ', close_prices)
    except:
        print('VolatilityData -- get_impliedvolmat_BS_OTM_oneMaturity failed')
        return
    return call_volatilities,put_converted_volatilites,strikes_call,strikes_put,\
           close_call,close_put,logMoneyness_call,logMoneyness_put,maturitydt,spot

def get_impliedvolmat_BS_put_cnvt_oneMaturity(evalDate,curve,daycounter,calendar,month,maxVol=1.0,step=0.0001,precision=0.001,show=True):
    try:
        # Get Wind Market Data
        vols, spot, mktData, mktFlds, optionData, optionFlds,optionids = get_wind_data(evalDate)
        ql.Settings.instance().evaluationDate = evalDate
        yield_ts = ql.YieldTermStructureHandle(curve)
        dividend_ts = ql.YieldTermStructureHandle(ql.FlatForward(evalDate,0.0,daycounter))
        vol_data = []
        close_call = []
        close_put = []
        logMoneyness_call = []
        logMoneyness_put = []
        strikes_call = []
        strikes_put = []
        call_volatilities = []
        put_converted_volatilites = []
        call_pair = []
        put_pair =[]
        maturitydt = 0.0
        if show:
            print("="*110)
            print("%10s %10s %10s %10s %25s %25s %20s" % ("Type","Spot", "Strike", "close","moneyness", "impliedVol", "Error (%)"))
            print("-"*110)
        for idx,optionid in enumerate(optionids):
            optionDataIdx   = optionData[optionFlds.index('wind_code')].index(optionid)
            mdate           = pd.to_datetime(optionData[optionFlds.index('exercise_date')][optionDataIdx])
            if mdate.month == month:
                maturitydt  = ql.Date(mdate.day, mdate.month, mdate.year)
                mktindex    = mktData[mktFlds.index('option_code')].index(optionid)
                strike      = optionData[optionFlds.index('exercise_price')][optionDataIdx]
                close       = mktData[mktFlds.index('close')][mktindex]
                ttm         = daycounter.yearFraction(evalDate, maturitydt)
                rf          = curve.zeroRate(maturitydt,daycounter,ql.Continuous).rate()
                Ft          = spot* math.exp(rf*ttm)
                optiontype  = ql.Option.Call
                if optionData[optionFlds.index('call_or_put')][optionDataIdx] == '认购':
                    eqvlt_close = close
                    implied_vol,error = calculate_vol_BS(maturitydt, optiontype, strike, spot, dividend_ts, yield_ts, eqvlt_close, evalDate,
                                     calendar, daycounter, precision, maxVol, step)
                    logMoneyness = math.log(strike / Ft, math.e)
                    logMoneyness_call.append(logMoneyness)
                    strikes_call.append(strike)
                    call_volatilities.append(implied_vol)
                    close_call.append(close)
                    if show: print(
                        "%10s %10s %10s %10s %25s %25s %20s" % ('Call',spot, strike, close, logMoneyness, implied_vol, error))
                else:
                    eqvlt_close = close + spot - math.exp(-rf*ttm) * strike
                    implied_vol, error = calculate_vol_BS(maturitydt, optiontype, strike, spot, dividend_ts, yield_ts,
                                                          eqvlt_close, evalDate,
                                                          calendar, daycounter, precision, maxVol, step)
                    logMoneyness = math.log(strike / Ft, math.e)
                    logMoneyness_put.append(logMoneyness)
                    strikes_put.append(strike)
                    put_converted_volatilites.append(implied_vol)
                    close_put.append(close)
                    if show: print(
                        "%10s %10s %10s %10s %25s %25s %20s" % ('Put', spot, strike, close, logMoneyness, implied_vol, error))
        if show : print("-"*110)
        #print('vols:', vol_data)
        #print('close prices: ', close_prices)
    except:
        print('VolatilityData -- get_impliedvolmat_BS_put_cnvt_oneMaturity failed')
        return
    return call_volatilities,put_converted_volatilites,strikes_call,strikes_put,\
           close_call,close_put,logMoneyness_call,logMoneyness_put,maturitydt,spot

def calculate_vol_BS(maturitydt,optiontype,strike,spot,dividend_ts,yield_ts,eqvlt_close,evalDate,calendar,daycounter,precision,maxVol,step):
    exercise = ql.EuropeanExercise(maturitydt)
    payoff = ql.PlainVanillaPayoff(optiontype, strike)
    option = ql.EuropeanOption(payoff, exercise)
    flat_vol_ts = ql.BlackVolTermStructureHandle(
                ql.BlackConstantVol(evalDate, calendar, 0.0, daycounter))
    process = ql.BlackScholesMertonProcess(ql.QuoteHandle(ql.SimpleQuote(spot)), dividend_ts, yield_ts,
                                           flat_vol_ts)
    option.setPricingEngine(ql.AnalyticEuropeanEngine(process))
    error = 0.0
    try:
        implied_vol = option.impliedVolatility(eqvlt_close, process, 1.0e-4, 300, 0.0, 4.0)
    except RuntimeError:
        implied_vol = 0.0
    if implied_vol == 0.0:
        error = 'NaN'
        sigma = maxVol
        implied_vol = 0.0
        # candidate_prices = []
        while sigma >= step:
            flat_vol_ts_it = ql.BlackVolTermStructureHandle(
                ql.BlackConstantVol(evalDate, calendar, sigma, daycounter))
            process = ql.BlackScholesMertonProcess(ql.QuoteHandle(ql.SimpleQuote(spot)), dividend_ts,
                                                   yield_ts, flat_vol_ts_it)
            option.setPricingEngine(ql.AnalyticEuropeanEngine(process))
            price = option.NPV()
            # candidate_prices.append(price)
            if abs(price - eqvlt_close) < precision:
                # print('error : ', price - close)
                error = price - eqvlt_close
                break
            sigma -= step
        implied_vol = sigma
    return implied_vol,error

def calculate_PCParity_riskFreeRate(evalDate,daycounter,calendar,i):
    vols, spot, mktData, mktFlds, optionData, optionFlds,optionids = get_wind_data(evalDate)
    call = {}
    put = {}
    ttm = 0.0
    for idx,optionid in enumerate(optionids):
        optionDataIdx   = optionData[optionFlds.index('wind_code')].index(optionid)
        mdate = pd.to_datetime(optionData[optionFlds.index('exercise_date')][optionDataIdx])
        if mdate.month == evalDate.month() + i:
            mktindex = mktData[mktFlds.index('option_code')].index(optionid)
            close = mktData[mktFlds.index('close')][mktindex]
            strike = optionData[optionFlds.index('exercise_price')][optionDataIdx]
            if optionData[optionFlds.index('call_or_put')][optionDataIdx] == '认购':
                call.update({strike:close})
            else:
                put.update({strike:close})
            maturitydt = ql.Date(mdate.day, mdate.month, mdate.year)
            ttm = daycounter.yearFraction(evalDate, maturitydt)
    count = len(call.keys())
    r_avg = 0.0
    for k, strike in enumerate(call.keys()):
        r = (1/ttm)*math.log((spot+put.get(strike)-call.get(strike))/strike,math.e)
        #print('strike is : ',strike,'rate is : ',r)
        r_avg +=r
    r_avg = r_avg/count
    return r_avg

def get_curve_depo(evalDate,daycounter):
    datestr = str(evalDate.year()) + "-" + str(evalDate.month()) + "-" + str(evalDate.dayOfMonth())
    data   = w.wsd("DR001.IB,DR007.IB,DR014.IB,DR021.IB,DR1M.IB,DR2M.IB,DR3M.IB,DR4M.IB,DR6M.IB,DR9M.IB,DR1Y.IB",
        "ytm_b", datestr, datestr, "returnType=1")
    calendar = ql.China()
    dates  = [
              calendar.advance(evalDate , ql.Period(1,ql.Days)),
              calendar.advance(evalDate , ql.Period(7,ql.Days)),
              calendar.advance(evalDate , ql.Period(14,ql.Days)),
              calendar.advance(evalDate , ql.Period(21,ql.Days)),
              calendar.advance(evalDate , ql.Period(1,ql.Months)),
              calendar.advance(evalDate , ql.Period(2,ql.Months)),
              calendar.advance(evalDate , ql.Period(3,ql.Months)),
              calendar.advance(evalDate , ql.Period(4,ql.Months)),
              calendar.advance(evalDate , ql.Period(6,ql.Months)),
              calendar.advance(evalDate , ql.Period(9,ql.Months)),
              calendar.advance(evalDate , ql.Period(1,ql.Years))]
    try:
        krates = np.divide( data.Data[0], 100)
        #print(dates)
        #print(krates)
        curve  = ql.ForwardCurve(dates,krates,daycounter)
    except:
        print(evalDate,' get curve failed')
        return
    #print(curve.referenceDate(),' , ',curve.maxDate())
    return curve

def get_curve_treasuryBond(evalDate,daycounter):
    datestr = str(evalDate.year()) + "-" + str(evalDate.month()) + "-" + str(evalDate.dayOfMonth())
    try:
        data   = w.wsd("DR001.IB,CGB1M.WI,CGB3M.WI,CGB6M.WI,CGB9M.WI,CGB1Y.WI",
                       "ytm_b", datestr, datestr, "returnType=1")
        calendar = ql.China()
        dates  = [calendar.advance(evalDate, ql.Period(1,ql.Days)),
                  calendar.advance(evalDate, ql.Period(1, ql.Months)),
                  calendar.advance(evalDate, ql.Period(3, ql.Months)),
                  calendar.advance(evalDate, ql.Period(6, ql.Months)),
                  calendar.advance(evalDate, ql.Period(9, ql.Months)),
                  calendar.advance(evalDate, ql.Period(1, ql.Years))]
        rates = data.Data[0]
        krates = np.divide( rates, 100)
        #print(dates)
        #print(krates)
        curve  = ql.ForwardCurve(dates,krates,daycounter)
    except:
        print(evalDate,' get curve failed')
        return
    #print(curve.referenceDate(),' , ',curve.maxDate())
    return curve

########################################################################################################################
def get_impliedvolmat_call_BS(evalDate,daycounter,calendar):
    # Get Wind Market Data
    vols, spot, mktData, mktFlds, optionData, optionFlds,optionids = get_wind_data(evalDate)
    # Evaluation Settings
    ql.Settings.instance().evaluationDate = evalDate
    curve       = get_curve_depo(evalDate, daycounter)
    yield_ts    = ql.YieldTermStructureHandle(curve)
    dividend_ts = ql.YieldTermStructureHandle(ql.FlatForward(evalDate,0.0,daycounter))
    flat_vol_ts = ql.BlackVolTermStructureHandle(ql.BlackConstantVol(evalDate, calendar, 0.0, daycounter))
    # Prepare strikes,maturity dates for BlackVarianceSurface
    optionids   = mktData[mktFlds.index('option_code')]
    vol1 = []
    vol2 = []
    vol3 = []
    vol4 = []
    close1 = []
    close2 = []
    close3 = []
    close4 = []
    #strikes = [2.3, 2.35, 2.4, 2.45, 2.5, 2.55, 2.6]
    strikes = [2.45, 2.5, 2.55, 2.6]
    tempcontainer = [2.299, 2.3, 2.35, 2.4, 2.45, 2.5, 2.55, 2.6]
    for idx,optionid in enumerate(optionids):
        optionDataIdx   = optionData[optionFlds.index('wind_code')].index(optionid)
        if optionData[optionFlds.index('call_or_put')][optionDataIdx] == '认购':
            optiontype  = ql.Option.Call
            strike      = optionData[optionFlds.index('exercise_price')][optionDataIdx]
            mdate       = pd.to_datetime(optionData[optionFlds.index('exercise_date')][optionDataIdx])
            maturitydt  = ql.Date(mdate.day,mdate.month,mdate.year)
            mktindex    = mktData[mktFlds.index('option_code')].index(optionid)
            close       = mktData[mktFlds.index('close')][mktindex]
            exercise    = ql.EuropeanExercise(maturitydt)
            payoff      = ql.PlainVanillaPayoff(optiontype,strike)
            option      = ql.EuropeanOption(payoff,exercise)
            process     = ql.BlackScholesMertonProcess(ql.QuoteHandle(ql.SimpleQuote(spot)),dividend_ts,yield_ts,flat_vol_ts)
            option.setPricingEngine(ql.AnalyticEuropeanEngine(process))
            try:
                implied_vol = option.impliedVolatility(close,process,1.0e-1,300,0.0,4.0)
            except RuntimeError:
                implied_vol = 0.00
            if strike in strikes:
                if mdate.month == evalDate.month():
                    vol1.append(implied_vol)
                    close1.append(close)
                    dt1 = maturitydt
                elif mdate.month == evalDate.month() + 1:
                    vol2.append(implied_vol)
                    close2.append(close)
                    dt2 = maturitydt
                elif mdate.month == 9:
                    vol3.append(implied_vol)
                    close3.append(close)
                    dt3 = maturitydt
                elif mdate.month == 12:
                    vol4.append(implied_vol)
                    close4.append(close)
                    dt4 = maturitydt
    # Matrix data to construct BlackVarianceSurface
    data = [vol1,vol2,vol3,vol4]
    expiration_dates = [dt1,dt2,dt3,dt4]
    matrix = ql.Matrix(len(strikes), len(expiration_dates))
    close_prices = [close1,close2,close3,close4]
    #print('vols:', data)
    #print('close prices: ', close_prices)
    return data,expiration_dates,strikes,spot

def get_impliedvolmat_call_wind(evalDate):
    # Get Wind Market Data
    vols, spot, mktData, mktFlds, optionData, optionFlds,optionids = get_wind_data(evalDate)
    vol1 = []
    vol2 = []
    vol3 = []
    vol4 = []
    close1 = []
    close2 = []
    close3 = []
    close4 = []
    #strikes = [2.3, 2.35, 2.4, 2.45, 2.5, 2.55, 2.6]
    strikes = [2.45, 2.5, 2.55, 2.6]
    tempcontainer = [2.299, 2.3, 2.35, 2.4, 2.45, 2.5, 2.55, 2.6]
    for idx,optionid in enumerate(optionids):
        optionDataIdx   = optionData[optionFlds.index('wind_code')].index(optionid)
        if optionData[optionFlds.index('call_or_put')][optionDataIdx] == '认购':
            optiontype  = ql.Option.Call
            strike      = optionData[optionFlds.index('exercise_price')][optionDataIdx]
            mdate       = pd.to_datetime(optionData[optionFlds.index('exercise_date')][optionDataIdx])
            maturitydt  = ql.Date(mdate.day,mdate.month,mdate.year)
            mktindex    = mktData[mktFlds.index('option_code')].index(optionid)
            close       = mktData[mktFlds.index('close')][mktindex]
            #voldata     = w.wss(optionid + '.SH', "us_impliedvol", "tradeDate=20170612")
            #implied_vol = voldata.Data[0][0]
            implied_vol = vols[idx]
            if strike in strikes:
                if mdate.month == evalDate.month():
                    vol1.append(implied_vol)
                    close1.append(close)
                    dt1 = maturitydt
                elif mdate.month == evalDate.month() + 1:
                    vol2.append(implied_vol)
                    close2.append(close)
                    dt2 = maturitydt
                elif mdate.month == 9:
                    vol3.append(implied_vol)
                    close3.append(close)
                    dt3 = maturitydt
                elif mdate.month == 12:
                    vol4.append(implied_vol)
                    close4.append(close)
                    dt4 = maturitydt
    # Matrix data to construct BlackVarianceSurface
    data = [vol1,vol2,vol3,vol4]
    expiration_dates = [dt1,dt2,dt3,dt4]
    matrix = ql.Matrix(len(strikes), len(expiration_dates))
    close_prices = [close1,close2,close3,close4]
    #print('vols:', data)
    #print('close prices: ', close_prices)
    return data,expiration_dates,strikes,spot

def get_impliedvolmat_wind_oneMaturity(type,evalDate,i):
    # Get Wind Market Data
    vols, spot, mktData, mktFlds, optionData, optionFlds,optionids = get_wind_data(evalDate)
    vol_data = []
    close_prices = []
    #strikes = [2.3, 2.35, 2.4, 2.45, 2.5, 2.55, 2.6]
    #strikes = [2.45, 2.5, 2.55, 2.6]
    strikes = []
    for idx,optionid in enumerate(optionids):
        optionDataIdx   = optionData[optionFlds.index('wind_code')].index(optionid)
        if optionData[optionFlds.index('call_or_put')][optionDataIdx] == type:
            #if vols[idx] == 0: continue
            optiontype  = ql.Option.Call
            strike      = optionData[optionFlds.index('exercise_price')][optionDataIdx]
            mdate       = pd.to_datetime(optionData[optionFlds.index('exercise_date')][optionDataIdx])
            maturitydt  = ql.Date(mdate.day,mdate.month,mdate.year)
            mktindex    = mktData[mktFlds.index('option_code')].index(optionid)
            close       = mktData[mktFlds.index('close')][mktindex]
            #voldata     = w.wss(optionid + '.SH', "us_impliedvol", "tradeDate=20170612")
            #implied_vol = voldata.Data[0][0]
            implied_vol = vols[idx]

            if mdate.month == i:
                strikes.append(strike)
                vol_data.append(implied_vol)
                close_prices.append(close)
                expiration_date = maturitydt

    #print('vols:', vol_data)
    #print('close prices: ', close_prices)
    return vol_data,expiration_date,strikes,spot

def get_impliedvolmat_BS_oneMaturity(type, evalDate,daycounter,calendar,i,maxVol=1.0,step=0.0001,precision=0.001,show=True):
    # Get Wind Market Data
    vols, spot, mktData, mktFlds, optionData, optionFlds,optionids = get_wind_data(evalDate)
    ql.Settings.instance().evaluationDate = evalDate
    curve = get_curve_depo(evalDate, daycounter)
    yield_ts = ql.YieldTermStructureHandle(curve)
    dividend_ts = ql.YieldTermStructureHandle(ql.FlatForward(evalDate,0.0,daycounter))
    flat_vol_ts = ql.BlackVolTermStructureHandle(ql.BlackConstantVol(evalDate, calendar, 0.0, daycounter))
    vol_data = []
    close_prices = []
    logMoneynesses = []
    #strikes = [2.3, 2.35, 2.4, 2.45, 2.5, 2.55, 2.6]
    #strikes = [2.45, 2.5, 2.55, 2.6]
    strikes = []
    if show:
        print("="*110)
        print("%10s %10s %10s %25s %25s %20s" % ("Spot", "Strike", "close","moneyness", "impliedVol", "Error (%)"))
        print("-"*110)
    for idx,optionid in enumerate(optionids):
        optionDataIdx   = optionData[optionFlds.index('wind_code')].index(optionid)
        mdate           = pd.to_datetime(optionData[optionFlds.index('exercise_date')][optionDataIdx])
        if mdate.month == i:
            maturitydt  = ql.Date(mdate.day, mdate.month, mdate.year)
            mktindex    = mktData[mktFlds.index('option_code')].index(optionid)
            strike      = optionData[optionFlds.index('exercise_price')][optionDataIdx]
            close       = mktData[mktFlds.index('close')][mktindex]
            ttm         = daycounter.yearFraction(evalDate, maturitydt)
            rf          = curve.zeroRate(maturitydt,daycounter,ql.Continuous).rate()
            Ft          = spot* math.exp(rf*ttm)
            if type == '认购': optiontype  = ql.Option.Call
            else:optiontype  = ql.Option.Put
            if optionData[optionFlds.index('call_or_put')][optionDataIdx] == type:
                exercise    = ql.EuropeanExercise(maturitydt)
                payoff      = ql.PlainVanillaPayoff(optiontype,strike)
                option      = ql.EuropeanOption(payoff,exercise)
                process     = ql.BlackScholesMertonProcess(ql.QuoteHandle(ql.SimpleQuote(spot)),dividend_ts,yield_ts,flat_vol_ts)
                option.setPricingEngine(ql.AnalyticEuropeanEngine(process))
                error       = 0.0
                try:
                    implied_vol = option.impliedVolatility(close,process,1.0e-4,300,0.0,4.0)
                except RuntimeError:
                    implied_vol = 0.0
                if implied_vol == 0.0:
                    error = 'NaN'
                    sigma = maxVol
                    implied_vol = 0.0
                    #candidate_prices = []
                    while sigma >= 0.0:
                        flat_vol_ts_it = ql.BlackVolTermStructureHandle(ql.BlackConstantVol(evalDate, calendar, sigma, daycounter))
                        process = ql.BlackScholesMertonProcess(ql.QuoteHandle(ql.SimpleQuote(spot)), dividend_ts,
                                                               yield_ts, flat_vol_ts_it)
                        option.setPricingEngine(ql.AnalyticEuropeanEngine(process))
                        price = option.NPV()
                        #candidate_prices.append(price)
                        if abs(price - close) < precision:
                            #print('error : ', price - close)
                            error = price - close
                            break
                        sigma -= step
                    implied_vol = sigma
                #print('implied vol : ', implied_vol)
                logMoneyness = math.log(strike / Ft, math.e)
                logMoneynesses.append(logMoneyness)
                strikes.append(strike)
                vol_data.append(implied_vol)
                close_prices.append(close)
                if show : print("%10s %10s %10s %25s %25s %20s" % (spot, strike, close,logMoneyness, implied_vol, error))
    if show : print("-"*110)
    #print('vols:', vol_data)
    #print('close prices: ', close_prices)
    return vol_data,maturitydt,strikes,spot,close_prices,logMoneynesses
